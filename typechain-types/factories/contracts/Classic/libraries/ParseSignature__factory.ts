/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ParseSignature,
  ParseSignatureInterface,
} from "../../../../contracts/Classic/libraries/ParseSignature";

const _abi = [
  {
    inputs: [],
    name: "InvalidSignatureLength",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "parse",
    outputs: [
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x610220610039600b82828239805160001a607314602c57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063fab4087a1461003a575b600080fd5b61004d610048366004610111565b610070565b6040805160ff909416845260208401929092529082015260600160405180910390f35b6000808060418490036100b25761008984860186610185565b9092509050848460408181106100a1576100a16101a7565b919091013560f81c935061010a9050565b60408490036100f15760006100c985870187610185565b9093506001600160ff1b038116925090506100e960ff82901c601b6101bd565b93505061010a565b604051634be6321b60e01b815260040160405180910390fd5b9250925092565b6000806020838503121561012457600080fd5b823567ffffffffffffffff81111561013b57600080fd5b8301601f8101851361014c57600080fd5b803567ffffffffffffffff81111561016357600080fd5b85602082840101111561017557600080fd5b6020919091019590945092505050565b6000806040838503121561019857600080fd5b50508035926020909101359150565b634e487b7160e01b600052603260045260246000fd5b60ff81811683821601908111156101e457634e487b7160e01b600052601160045260246000fd5b9291505056fea264697066735822122023d01ff1ed372591f6fb651b4243207e35bb70aca63c1deff4d5fef29fe51cd464736f6c634300081c0033";

type ParseSignatureConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ParseSignatureConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ParseSignature__factory extends ContractFactory {
  constructor(...args: ParseSignatureConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ParseSignature & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ParseSignature__factory {
    return super.connect(runner) as ParseSignature__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ParseSignatureInterface {
    return new Interface(_abi) as ParseSignatureInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ParseSignature {
    return new Contract(address, _abi, runner) as unknown as ParseSignature;
  }
}
