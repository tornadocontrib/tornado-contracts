/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../../../common";

export interface IAddressResolverInterface extends Interface {
  getFunction(nameOrSignature: "addr"): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;

  encodeFunctionData(
    functionFragment: "addr",
    values: [BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
}

export namespace AddressChangedEvent {
  export type InputTuple = [
    node: BytesLike,
    coinType: BigNumberish,
    newAddress: BytesLike
  ];
  export type OutputTuple = [
    node: string,
    coinType: bigint,
    newAddress: string
  ];
  export interface OutputObject {
    node: string;
    coinType: bigint;
    newAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IAddressResolver extends BaseContract {
  connect(runner?: ContractRunner | null): IAddressResolver;
  waitForDeployment(): Promise<this>;

  interface: IAddressResolverInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addr: TypedContractMethod<
    [node: BytesLike, coinType: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addr"
  ): TypedContractMethod<
    [node: BytesLike, coinType: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "AddressChanged"
  ): TypedContractEvent<
    AddressChangedEvent.InputTuple,
    AddressChangedEvent.OutputTuple,
    AddressChangedEvent.OutputObject
  >;

  filters: {
    "AddressChanged(bytes32,uint256,bytes)": TypedContractEvent<
      AddressChangedEvent.InputTuple,
      AddressChangedEvent.OutputTuple,
      AddressChangedEvent.OutputObject
    >;
    AddressChanged: TypedContractEvent<
      AddressChangedEvent.InputTuple,
      AddressChangedEvent.OutputTuple,
      AddressChangedEvent.OutputObject
    >;
  };
}
