/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IABIResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddrResolver__factory>;
    getContractFactory(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentHashResolver__factory>;
    getContractFactory(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSRecordResolver__factory>;
    getContractFactory(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSZoneResolver__factory>;
    getContractFactory(
      name: "IExtendedResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IExtendedResolver__factory>;
    getContractFactory(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfaceResolver__factory>;
    getContractFactory(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameResolver__factory>;
    getContractFactory(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPubkeyResolver__factory>;
    getContractFactory(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITextResolver__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "BytesUtils",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BytesUtils__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "UpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TimelockController__factory>;
    getContractFactory(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Errors__factory>;
    getContractFactory(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Errors__factory>;
    getContractFactory(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Errors__factory>;
    getContractFactory(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC5267__factory>;
    getContractFactory(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1155Receiver__factory>;
    getContractFactory(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1155Holder__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Holder__factory>;
    getContractFactory(
      name: "Address",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Address__factory>;
    getContractFactory(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ECDSA__factory>;
    getContractFactory(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EIP712__factory>;
    getContractFactory(
      name: "Errors",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Errors__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafeCast__factory>;
    getContractFactory(
      name: "Nonces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Nonces__factory>;
    getContractFactory(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ShortStrings__factory>;
    getContractFactory(
      name: "Strings",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Strings__factory>;
    getContractFactory(
      name: "CTornado",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CTornado__factory>;
    getContractFactory(
      name: "Echoer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Echoer__factory>;
    getContractFactory(
      name: "ERC20Tornado",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Tornado__factory>;
    getContractFactory(
      name: "ETHTornado",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ETHTornado__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IHasher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IHasher__factory>;
    getContractFactory(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVerifier__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "MerkleTreeWithHistory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeWithHistory__factory>;
    getContractFactory(
      name: "BadRecipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadRecipient__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "IDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeployer__factory>;
    getContractFactory(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Basic__factory>;
    getContractFactory(
      name: "IUSDT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUSDT__factory>;
    getContractFactory(
      name: "MerkleTreeWithHistoryMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleTreeWithHistoryMock__factory>;
    getContractFactory(
      name: "Tornado",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tornado__factory>;
    getContractFactory(
      name: "ITornadoInstance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoInstance__factory>;
    getContractFactory(
      name: "TornadoProxyLight",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TornadoProxyLight__factory>;
    getContractFactory(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Verifier__factory>;
    getContractFactory(
      name: "AdminUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeableProxy__factory>;
    getContractFactory(
      name: "Aggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Aggregator__factory>;
    getContractFactory(
      name: "GovernanceAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceAggregator__factory>;
    getContractFactory(
      name: "RelayerAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayerAggregator__factory>;
    getContractFactory(
      name: "Deployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Deployer__factory>;
    getContractFactory(
      name: "IDeployer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDeployer__factory>;
    getContractFactory(
      name: "FeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeManager__factory>;
    getContractFactory(
      name: "GasCompensationVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasCompensationVault__factory>;
    getContractFactory(
      name: "InstanceRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InstanceRegistry__factory>;
    getContractFactory(
      name: "ITornadoRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoRouter__factory>;
    getContractFactory(
      name: "IGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernance__factory>;
    getContractFactory(
      name: "IRelayerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRelayerRegistry__factory>;
    getContractFactory(
      name: "ITornadoInstance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoInstance__factory>;
    getContractFactory(
      name: "IERC20Decimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Decimals__factory>;
    getContractFactory(
      name: "LoopbackProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LoopbackProxy__factory>;
    getContractFactory(
      name: "IENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IENS__factory>;
    getContractFactory(
      name: "IFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFeeManager__factory>;
    getContractFactory(
      name: "RelayerRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RelayerRegistry__factory>;
    getContractFactory(
      name: "SingletonFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SingletonFactory__factory>;
    getContractFactory(
      name: "TestnetAdminProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetAdminProxy__factory>;
    getContractFactory(
      name: "TestnetFeeManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetFeeManager__factory>;
    getContractFactory(
      name: "TestnetGovernanceProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetGovernanceProxy__factory>;
    getContractFactory(
      name: "IChainlinkOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IChainlinkOracle__factory>;
    getContractFactory(
      name: "IOffchainOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IOffchainOracle__factory>;
    getContractFactory(
      name: "TestnetOracle",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestnetOracle__factory>;
    getContractFactory(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop__factory>;
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "EnsResolve",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EnsResolve__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "AirdropMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AirdropMock__factory>;
    getContractFactory(
      name: "ENSMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSMock__factory>;
    getContractFactory(
      name: "Timestamp",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timestamp__factory>;
    getContractFactory(
      name: "TORNMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TORNMock__factory>;
    getContractFactory(
      name: "VestingMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VestingMock__factory>;
    getContractFactory(
      name: "VoucherMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoucherMock__factory>;
    getContractFactory(
      name: "TORN",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TORN__factory>;
    getContractFactory(
      name: "Vesting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Vesting__factory>;
    getContractFactory(
      name: "Voucher",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voucher__factory>;
    getContractFactory(
      name: "TornadoRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TornadoRouter__factory>;
    getContractFactory(
      name: "ITornadoGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoGovernance__factory>;
    getContractFactory(
      name: "ITornadoVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoVault__factory>;
    getContractFactory(
      name: "TornadoStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TornadoStakingRewards__factory>;
    getContractFactory(
      name: "TornadoVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TornadoVault__factory>;
    getContractFactory(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Factory__factory>;
    getContractFactory(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3Pool__factory>;
    getContractFactory(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState__factory>;
    getContractFactory(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolEvents__factory>;
    getContractFactory(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables__factory>;
    getContractFactory(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions__factory>;
    getContractFactory(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IUniswapV3PoolState__factory>;
    getContractFactory(
      name: "Configuration",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Configuration__factory>;
    getContractFactory(
      name: "Core",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Core__factory>;
    getContractFactory(
      name: "Delegation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Delegation__factory>;
    getContractFactory(
      name: "Governance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governance__factory>;
    getContractFactory(
      name: "Dummy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Dummy__factory>;
    getContractFactory(
      name: "DummySecond",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummySecond__factory>;
    getContractFactory(
      name: "MockGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGovernance__factory>;
    getContractFactory(
      name: "Proposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proposal__factory>;
    getContractFactory(
      name: "IGovernance2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGovernance2__factory>;
    getContractFactory(
      name: "ProposalStateChangeGovernance",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProposalStateChangeGovernance__factory>;
    getContractFactory(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IProxy__factory>;
    getContractFactory(
      name: "NewImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NewImplementation__factory>;
    getContractFactory(
      name: "ProposalUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProposalUpgrade__factory>;
    getContractFactory(
      name: "GasCompensator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GasCompensator__factory>;
    getContractFactory(
      name: "IGasCompensationVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGasCompensationVault__factory>;
    getContractFactory(
      name: "GovernanceGasUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceGasUpgrade__factory>;
    getContractFactory(
      name: "GovernanceVaultUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceVaultUpgrade__factory>;
    getContractFactory(
      name: "ITornadoVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoVault__factory>;
    getContractFactory(
      name: "GovernanceStakingUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceStakingUpgrade__factory>;
    getContractFactory(
      name: "ITornadoStakingRewards",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoStakingRewards__factory>;
    getContractFactory(
      name: "AdminUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdminUpgradeableProxy__factory>;
    getContractFactory(
      name: "GovernanceExploitPatchUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceExploitPatchUpgrade__factory>;
    getContractFactory(
      name: "IMetamorphicContractFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMetamorphicContractFactory__factory>;
    getContractFactory(
      name: "InitialProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InitialProposal__factory>;
    getContractFactory(
      name: "MaliciousProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaliciousProposal__factory>;
    getContractFactory(
      name: "PatchProposal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PatchProposal__factory>;
    getContractFactory(
      name: "GovernanceProposalStateUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GovernanceProposalStateUpgrade__factory>;
    getContractFactory(
      name: "ApprovalTornado",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ApprovalTornado__factory>;
    getContractFactory(
      name: "InfoRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InfoRegistry__factory>;
    getContractFactory(
      name: "ISignatureTransfer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignatureTransfer__factory>;
    getContractFactory(
      name: "ITornadoV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITornadoV2__factory>;
    getContractFactory(
      name: "ITovarishRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITovarishRegistry__factory>;
    getContractFactory(
      name: "IVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVault__factory>;
    getContractFactory(
      name: "ParseSignature",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ParseSignature__factory>;
    getContractFactory(
      name: "Permit2Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Permit2Mock__factory>;
    getContractFactory(
      name: "MultiLock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiLock__factory>;
    getContractFactory(
      name: "Puppet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Puppet__factory>;
    getContractFactory(
      name: "TornadoV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TornadoV2__factory>;
    getContractFactory(
      name: "TovarishAggregator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TovarishAggregator__factory>;
    getContractFactory(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapper__factory>;
    getContractFactory(
      name: "TovarishRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TovarishRegistry__factory>;
    getContractFactory(
      name: "V2Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.V2Bridge__factory>;
    getContractFactory(
      name: "CreateX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CreateX__factory>;

    getContractAt(
      name: "ENS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "IABIResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IABIResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "IAddrResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddrResolver>;
    getContractAt(
      name: "IContentHashResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentHashResolver>;
    getContractAt(
      name: "IDNSRecordResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSRecordResolver>;
    getContractAt(
      name: "IDNSZoneResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSZoneResolver>;
    getContractAt(
      name: "IExtendedResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IExtendedResolver>;
    getContractAt(
      name: "IInterfaceResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfaceResolver>;
    getContractAt(
      name: "INameResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INameResolver>;
    getContractAt(
      name: "IPubkeyResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IPubkeyResolver>;
    getContractAt(
      name: "ITextResolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITextResolver>;
    getContractAt(
      name: "Resolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "BytesUtils",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BytesUtils>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "UpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableProxy>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "TimelockController",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TimelockController>;
    getContractAt(
      name: "IERC1155Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Errors>;
    getContractAt(
      name: "IERC20Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Errors>;
    getContractAt(
      name: "IERC721Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Errors>;
    getContractAt(
      name: "IERC5267",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC5267>;
    getContractAt(
      name: "IERC1155Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1155Receiver>;
    getContractAt(
      name: "ERC1155Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1155Holder>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Receiver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC721Holder",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Holder>;
    getContractAt(
      name: "Address",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Address>;
    getContractAt(
      name: "ECDSA",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ECDSA>;
    getContractAt(
      name: "EIP712",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EIP712>;
    getContractAt(
      name: "Errors",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Errors>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "SafeCast",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SafeCast>;
    getContractAt(
      name: "Nonces",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Nonces>;
    getContractAt(
      name: "ShortStrings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ShortStrings>;
    getContractAt(
      name: "Strings",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Strings>;
    getContractAt(
      name: "CTornado",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CTornado>;
    getContractAt(
      name: "Echoer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Echoer>;
    getContractAt(
      name: "ERC20Tornado",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Tornado>;
    getContractAt(
      name: "ETHTornado",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ETHTornado>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IHasher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IHasher>;
    getContractAt(
      name: "IVerifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVerifier>;
    getContractAt(
      name: "IWETH",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "MerkleTreeWithHistory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeWithHistory>;
    getContractAt(
      name: "BadRecipient",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BadRecipient>;
    getContractAt(
      name: "ERC20Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "IDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeployer>;
    getContractAt(
      name: "ERC20Basic",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Basic>;
    getContractAt(
      name: "IUSDT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUSDT>;
    getContractAt(
      name: "MerkleTreeWithHistoryMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MerkleTreeWithHistoryMock>;
    getContractAt(
      name: "Tornado",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Tornado>;
    getContractAt(
      name: "ITornadoInstance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoInstance>;
    getContractAt(
      name: "TornadoProxyLight",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TornadoProxyLight>;
    getContractAt(
      name: "Verifier",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Verifier>;
    getContractAt(
      name: "AdminUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeableProxy>;
    getContractAt(
      name: "Aggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Aggregator>;
    getContractAt(
      name: "GovernanceAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceAggregator>;
    getContractAt(
      name: "RelayerAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayerAggregator>;
    getContractAt(
      name: "Deployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Deployer>;
    getContractAt(
      name: "IDeployer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDeployer>;
    getContractAt(
      name: "FeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeManager>;
    getContractAt(
      name: "GasCompensationVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasCompensationVault>;
    getContractAt(
      name: "InstanceRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InstanceRegistry>;
    getContractAt(
      name: "ITornadoRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoRouter>;
    getContractAt(
      name: "IGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernance>;
    getContractAt(
      name: "IRelayerRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRelayerRegistry>;
    getContractAt(
      name: "ITornadoInstance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoInstance>;
    getContractAt(
      name: "IERC20Decimals",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Decimals>;
    getContractAt(
      name: "LoopbackProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.LoopbackProxy>;
    getContractAt(
      name: "IENS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IENS>;
    getContractAt(
      name: "IFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFeeManager>;
    getContractAt(
      name: "RelayerRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.RelayerRegistry>;
    getContractAt(
      name: "SingletonFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SingletonFactory>;
    getContractAt(
      name: "TestnetAdminProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetAdminProxy>;
    getContractAt(
      name: "TestnetFeeManager",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetFeeManager>;
    getContractAt(
      name: "TestnetGovernanceProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetGovernanceProxy>;
    getContractAt(
      name: "IChainlinkOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IChainlinkOracle>;
    getContractAt(
      name: "IOffchainOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IOffchainOracle>;
    getContractAt(
      name: "TestnetOracle",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TestnetOracle>;
    getContractAt(
      name: "Airdrop",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Airdrop>;
    getContractAt(
      name: "ENS",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "EnsResolve",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.EnsResolve>;
    getContractAt(
      name: "Resolver",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "ERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "AirdropMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AirdropMock>;
    getContractAt(
      name: "ENSMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSMock>;
    getContractAt(
      name: "Timestamp",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Timestamp>;
    getContractAt(
      name: "TORNMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TORNMock>;
    getContractAt(
      name: "VestingMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VestingMock>;
    getContractAt(
      name: "VoucherMock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.VoucherMock>;
    getContractAt(
      name: "TORN",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TORN>;
    getContractAt(
      name: "Vesting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Vesting>;
    getContractAt(
      name: "Voucher",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Voucher>;
    getContractAt(
      name: "TornadoRouter",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TornadoRouter>;
    getContractAt(
      name: "ITornadoGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoGovernance>;
    getContractAt(
      name: "ITornadoVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoVault>;
    getContractAt(
      name: "TornadoStakingRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TornadoStakingRewards>;
    getContractAt(
      name: "TornadoVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TornadoVault>;
    getContractAt(
      name: "IUniswapV3Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Factory>;
    getContractAt(
      name: "IUniswapV3Pool",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3Pool>;
    getContractAt(
      name: "IUniswapV3PoolActions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolActions>;
    getContractAt(
      name: "IUniswapV3PoolDerivedState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    getContractAt(
      name: "IUniswapV3PoolEvents",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    getContractAt(
      name: "IUniswapV3PoolImmutables",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    getContractAt(
      name: "IUniswapV3PoolOwnerActions",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    getContractAt(
      name: "IUniswapV3PoolState",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IUniswapV3PoolState>;
    getContractAt(
      name: "Configuration",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Configuration>;
    getContractAt(
      name: "Core",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Core>;
    getContractAt(
      name: "Delegation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Delegation>;
    getContractAt(
      name: "Governance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Governance>;
    getContractAt(
      name: "Dummy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Dummy>;
    getContractAt(
      name: "DummySecond",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.DummySecond>;
    getContractAt(
      name: "MockGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockGovernance>;
    getContractAt(
      name: "Proposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proposal>;
    getContractAt(
      name: "IGovernance2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGovernance2>;
    getContractAt(
      name: "ProposalStateChangeGovernance",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProposalStateChangeGovernance>;
    getContractAt(
      name: "IProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IProxy>;
    getContractAt(
      name: "NewImplementation",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NewImplementation>;
    getContractAt(
      name: "ProposalUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ProposalUpgrade>;
    getContractAt(
      name: "GasCompensator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GasCompensator>;
    getContractAt(
      name: "IGasCompensationVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGasCompensationVault>;
    getContractAt(
      name: "GovernanceGasUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceGasUpgrade>;
    getContractAt(
      name: "GovernanceVaultUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceVaultUpgrade>;
    getContractAt(
      name: "ITornadoVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoVault>;
    getContractAt(
      name: "GovernanceStakingUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceStakingUpgrade>;
    getContractAt(
      name: "ITornadoStakingRewards",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoStakingRewards>;
    getContractAt(
      name: "AdminUpgradeableProxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AdminUpgradeableProxy>;
    getContractAt(
      name: "GovernanceExploitPatchUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceExploitPatchUpgrade>;
    getContractAt(
      name: "IMetamorphicContractFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMetamorphicContractFactory>;
    getContractAt(
      name: "InitialProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InitialProposal>;
    getContractAt(
      name: "MaliciousProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MaliciousProposal>;
    getContractAt(
      name: "PatchProposal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.PatchProposal>;
    getContractAt(
      name: "GovernanceProposalStateUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GovernanceProposalStateUpgrade>;
    getContractAt(
      name: "ApprovalTornado",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ApprovalTornado>;
    getContractAt(
      name: "InfoRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.InfoRegistry>;
    getContractAt(
      name: "ISignatureTransfer",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignatureTransfer>;
    getContractAt(
      name: "ITornadoV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITornadoV2>;
    getContractAt(
      name: "ITovarishRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ITovarishRegistry>;
    getContractAt(
      name: "IVault",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IVault>;
    getContractAt(
      name: "ParseSignature",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ParseSignature>;
    getContractAt(
      name: "Permit2Mock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Permit2Mock>;
    getContractAt(
      name: "MultiLock",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiLock>;
    getContractAt(
      name: "Puppet",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Puppet>;
    getContractAt(
      name: "TornadoV2",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TornadoV2>;
    getContractAt(
      name: "TovarishAggregator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TovarishAggregator>;
    getContractAt(
      name: "INameWrapper",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapper>;
    getContractAt(
      name: "TovarishRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.TovarishRegistry>;
    getContractAt(
      name: "V2Bridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.V2Bridge>;
    getContractAt(
      name: "CreateX",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CreateX>;

    deployContract(
      name: "ENS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IABIResolver>;
    deployContract(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressResolver>;
    deployContract(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddrResolver>;
    deployContract(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContentHashResolver>;
    deployContract(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSRecordResolver>;
    deployContract(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSZoneResolver>;
    deployContract(
      name: "IExtendedResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExtendedResolver>;
    deployContract(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterfaceResolver>;
    deployContract(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameResolver>;
    deployContract(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPubkeyResolver>;
    deployContract(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITextResolver>;
    deployContract(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Resolver>;
    deployContract(
      name: "BytesUtils",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesUtils>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "UpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeableProxy>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "TimelockController",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TimelockController>;
    deployContract(
      name: "IERC1155Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC5267",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "IERC1155Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC721Holder",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Holder>;
    deployContract(
      name: "Address",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Errors",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Nonces",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Nonces>;
    deployContract(
      name: "ShortStrings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "CTornado",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CTornado>;
    deployContract(
      name: "Echoer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Echoer>;
    deployContract(
      name: "ERC20Tornado",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Tornado>;
    deployContract(
      name: "ETHTornado",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ETHTornado>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IHasher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHasher>;
    deployContract(
      name: "IVerifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MerkleTreeWithHistory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTreeWithHistory>;
    deployContract(
      name: "BadRecipient",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BadRecipient>;
    deployContract(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "IDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployer>;
    deployContract(
      name: "ERC20Basic",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Basic>;
    deployContract(
      name: "IUSDT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDT>;
    deployContract(
      name: "MerkleTreeWithHistoryMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTreeWithHistoryMock>;
    deployContract(
      name: "Tornado",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Tornado>;
    deployContract(
      name: "ITornadoInstance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoInstance>;
    deployContract(
      name: "TornadoProxyLight",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoProxyLight>;
    deployContract(
      name: "Verifier",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;
    deployContract(
      name: "AdminUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminUpgradeableProxy>;
    deployContract(
      name: "Aggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Aggregator>;
    deployContract(
      name: "GovernanceAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceAggregator>;
    deployContract(
      name: "RelayerAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerAggregator>;
    deployContract(
      name: "Deployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deployer>;
    deployContract(
      name: "IDeployer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployer>;
    deployContract(
      name: "FeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManager>;
    deployContract(
      name: "GasCompensationVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasCompensationVault>;
    deployContract(
      name: "InstanceRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InstanceRegistry>;
    deployContract(
      name: "ITornadoRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoRouter>;
    deployContract(
      name: "IGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance>;
    deployContract(
      name: "IRelayerRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayerRegistry>;
    deployContract(
      name: "ITornadoInstance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoInstance>;
    deployContract(
      name: "IERC20Decimals",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Decimals>;
    deployContract(
      name: "LoopbackProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LoopbackProxy>;
    deployContract(
      name: "IENS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IENS>;
    deployContract(
      name: "IFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeManager>;
    deployContract(
      name: "RelayerRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerRegistry>;
    deployContract(
      name: "SingletonFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SingletonFactory>;
    deployContract(
      name: "TestnetAdminProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetAdminProxy>;
    deployContract(
      name: "TestnetFeeManager",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetFeeManager>;
    deployContract(
      name: "TestnetGovernanceProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetGovernanceProxy>;
    deployContract(
      name: "IChainlinkOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainlinkOracle>;
    deployContract(
      name: "IOffchainOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOffchainOracle>;
    deployContract(
      name: "TestnetOracle",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetOracle>;
    deployContract(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "ENS",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "EnsResolve",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnsResolve>;
    deployContract(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Resolver>;
    deployContract(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "AirdropMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropMock>;
    deployContract(
      name: "ENSMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSMock>;
    deployContract(
      name: "Timestamp",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Timestamp>;
    deployContract(
      name: "TORNMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TORNMock>;
    deployContract(
      name: "VestingMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VestingMock>;
    deployContract(
      name: "VoucherMock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoucherMock>;
    deployContract(
      name: "TORN",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TORN>;
    deployContract(
      name: "Vesting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vesting>;
    deployContract(
      name: "Voucher",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Voucher>;
    deployContract(
      name: "TornadoRouter",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoRouter>;
    deployContract(
      name: "ITornadoGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoGovernance>;
    deployContract(
      name: "ITornadoVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoVault>;
    deployContract(
      name: "TornadoStakingRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoStakingRewards>;
    deployContract(
      name: "TornadoVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoVault>;
    deployContract(
      name: "IUniswapV3Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "IUniswapV3Pool",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "IUniswapV3PoolActions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolActions>;
    deployContract(
      name: "IUniswapV3PoolDerivedState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    deployContract(
      name: "IUniswapV3PoolEvents",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    deployContract(
      name: "IUniswapV3PoolImmutables",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    deployContract(
      name: "IUniswapV3PoolOwnerActions",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    deployContract(
      name: "IUniswapV3PoolState",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolState>;
    deployContract(
      name: "Configuration",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Configuration>;
    deployContract(
      name: "Core",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Core>;
    deployContract(
      name: "Delegation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Delegation>;
    deployContract(
      name: "Governance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governance>;
    deployContract(
      name: "Dummy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dummy>;
    deployContract(
      name: "DummySecond",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummySecond>;
    deployContract(
      name: "MockGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockGovernance>;
    deployContract(
      name: "Proposal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proposal>;
    deployContract(
      name: "IGovernance2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance2>;
    deployContract(
      name: "ProposalStateChangeGovernance",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProposalStateChangeGovernance>;
    deployContract(
      name: "IProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxy>;
    deployContract(
      name: "NewImplementation",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NewImplementation>;
    deployContract(
      name: "ProposalUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProposalUpgrade>;
    deployContract(
      name: "GasCompensator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasCompensator>;
    deployContract(
      name: "IGasCompensationVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasCompensationVault>;
    deployContract(
      name: "GovernanceGasUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceGasUpgrade>;
    deployContract(
      name: "GovernanceVaultUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceVaultUpgrade>;
    deployContract(
      name: "ITornadoVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoVault>;
    deployContract(
      name: "GovernanceStakingUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceStakingUpgrade>;
    deployContract(
      name: "ITornadoStakingRewards",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoStakingRewards>;
    deployContract(
      name: "AdminUpgradeableProxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminUpgradeableProxy>;
    deployContract(
      name: "GovernanceExploitPatchUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceExploitPatchUpgrade>;
    deployContract(
      name: "IMetamorphicContractFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetamorphicContractFactory>;
    deployContract(
      name: "InitialProposal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InitialProposal>;
    deployContract(
      name: "MaliciousProposal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MaliciousProposal>;
    deployContract(
      name: "PatchProposal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PatchProposal>;
    deployContract(
      name: "GovernanceProposalStateUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceProposalStateUpgrade>;
    deployContract(
      name: "ApprovalTornado",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ApprovalTornado>;
    deployContract(
      name: "InfoRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InfoRegistry>;
    deployContract(
      name: "ISignatureTransfer",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignatureTransfer>;
    deployContract(
      name: "ITornadoV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoV2>;
    deployContract(
      name: "ITovarishRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITovarishRegistry>;
    deployContract(
      name: "IVault",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "ParseSignature",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ParseSignature>;
    deployContract(
      name: "Permit2Mock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Permit2Mock>;
    deployContract(
      name: "MultiLock",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiLock>;
    deployContract(
      name: "Puppet",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Puppet>;
    deployContract(
      name: "TornadoV2",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoV2>;
    deployContract(
      name: "TovarishAggregator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TovarishAggregator>;
    deployContract(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameWrapper>;
    deployContract(
      name: "TovarishRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TovarishRegistry>;
    deployContract(
      name: "V2Bridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.V2Bridge>;
    deployContract(
      name: "CreateX",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateX>;

    deployContract(
      name: "ENS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "IABIResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IABIResolver>;
    deployContract(
      name: "IAddressResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddressResolver>;
    deployContract(
      name: "IAddrResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAddrResolver>;
    deployContract(
      name: "IContentHashResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IContentHashResolver>;
    deployContract(
      name: "IDNSRecordResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSRecordResolver>;
    deployContract(
      name: "IDNSZoneResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDNSZoneResolver>;
    deployContract(
      name: "IExtendedResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IExtendedResolver>;
    deployContract(
      name: "IInterfaceResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IInterfaceResolver>;
    deployContract(
      name: "INameResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameResolver>;
    deployContract(
      name: "IPubkeyResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IPubkeyResolver>;
    deployContract(
      name: "ITextResolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITextResolver>;
    deployContract(
      name: "Resolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Resolver>;
    deployContract(
      name: "BytesUtils",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BytesUtils>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "TransparentUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    deployContract(
      name: "UpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UpgradeableProxy>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "TimelockController",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TimelockController>;
    deployContract(
      name: "IERC1155Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Errors>;
    deployContract(
      name: "IERC20Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Errors>;
    deployContract(
      name: "IERC721Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Errors>;
    deployContract(
      name: "IERC5267",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC5267>;
    deployContract(
      name: "IERC1155Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1155Receiver>;
    deployContract(
      name: "ERC1155Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1155Holder>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IERC721Receiver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC721Receiver>;
    deployContract(
      name: "ERC721Holder",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC721Holder>;
    deployContract(
      name: "Address",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Address>;
    deployContract(
      name: "ECDSA",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ECDSA>;
    deployContract(
      name: "EIP712",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EIP712>;
    deployContract(
      name: "Errors",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Errors>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "SafeCast",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SafeCast>;
    deployContract(
      name: "Nonces",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Nonces>;
    deployContract(
      name: "ShortStrings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ShortStrings>;
    deployContract(
      name: "Strings",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Strings>;
    deployContract(
      name: "CTornado",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CTornado>;
    deployContract(
      name: "Echoer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Echoer>;
    deployContract(
      name: "ERC20Tornado",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Tornado>;
    deployContract(
      name: "ETHTornado",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ETHTornado>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "IHasher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IHasher>;
    deployContract(
      name: "IVerifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVerifier>;
    deployContract(
      name: "IWETH",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IWETH>;
    deployContract(
      name: "MerkleTreeWithHistory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTreeWithHistory>;
    deployContract(
      name: "BadRecipient",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BadRecipient>;
    deployContract(
      name: "ERC20Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Mock>;
    deployContract(
      name: "IDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployer>;
    deployContract(
      name: "ERC20Basic",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Basic>;
    deployContract(
      name: "IUSDT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUSDT>;
    deployContract(
      name: "MerkleTreeWithHistoryMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MerkleTreeWithHistoryMock>;
    deployContract(
      name: "Tornado",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Tornado>;
    deployContract(
      name: "ITornadoInstance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoInstance>;
    deployContract(
      name: "TornadoProxyLight",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoProxyLight>;
    deployContract(
      name: "Verifier",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Verifier>;
    deployContract(
      name: "AdminUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminUpgradeableProxy>;
    deployContract(
      name: "Aggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Aggregator>;
    deployContract(
      name: "GovernanceAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceAggregator>;
    deployContract(
      name: "RelayerAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerAggregator>;
    deployContract(
      name: "Deployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Deployer>;
    deployContract(
      name: "IDeployer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDeployer>;
    deployContract(
      name: "FeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FeeManager>;
    deployContract(
      name: "GasCompensationVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasCompensationVault>;
    deployContract(
      name: "InstanceRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InstanceRegistry>;
    deployContract(
      name: "ITornadoRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoRouter>;
    deployContract(
      name: "IGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance>;
    deployContract(
      name: "IRelayerRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRelayerRegistry>;
    deployContract(
      name: "ITornadoInstance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoInstance>;
    deployContract(
      name: "IERC20Decimals",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Decimals>;
    deployContract(
      name: "LoopbackProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.LoopbackProxy>;
    deployContract(
      name: "IENS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IENS>;
    deployContract(
      name: "IFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFeeManager>;
    deployContract(
      name: "RelayerRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.RelayerRegistry>;
    deployContract(
      name: "SingletonFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SingletonFactory>;
    deployContract(
      name: "TestnetAdminProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetAdminProxy>;
    deployContract(
      name: "TestnetFeeManager",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetFeeManager>;
    deployContract(
      name: "TestnetGovernanceProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetGovernanceProxy>;
    deployContract(
      name: "IChainlinkOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IChainlinkOracle>;
    deployContract(
      name: "IOffchainOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IOffchainOracle>;
    deployContract(
      name: "TestnetOracle",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TestnetOracle>;
    deployContract(
      name: "Airdrop",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Airdrop>;
    deployContract(
      name: "ENS",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENS>;
    deployContract(
      name: "EnsResolve",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.EnsResolve>;
    deployContract(
      name: "Resolver",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Resolver>;
    deployContract(
      name: "ERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Permit>;
    deployContract(
      name: "AirdropMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AirdropMock>;
    deployContract(
      name: "ENSMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ENSMock>;
    deployContract(
      name: "Timestamp",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Timestamp>;
    deployContract(
      name: "TORNMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TORNMock>;
    deployContract(
      name: "VestingMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VestingMock>;
    deployContract(
      name: "VoucherMock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.VoucherMock>;
    deployContract(
      name: "TORN",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TORN>;
    deployContract(
      name: "Vesting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Vesting>;
    deployContract(
      name: "Voucher",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Voucher>;
    deployContract(
      name: "TornadoRouter",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoRouter>;
    deployContract(
      name: "ITornadoGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoGovernance>;
    deployContract(
      name: "ITornadoVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoVault>;
    deployContract(
      name: "TornadoStakingRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoStakingRewards>;
    deployContract(
      name: "TornadoVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoVault>;
    deployContract(
      name: "IUniswapV3Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Factory>;
    deployContract(
      name: "IUniswapV3Pool",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3Pool>;
    deployContract(
      name: "IUniswapV3PoolActions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolActions>;
    deployContract(
      name: "IUniswapV3PoolDerivedState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolDerivedState>;
    deployContract(
      name: "IUniswapV3PoolEvents",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolEvents>;
    deployContract(
      name: "IUniswapV3PoolImmutables",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolImmutables>;
    deployContract(
      name: "IUniswapV3PoolOwnerActions",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolOwnerActions>;
    deployContract(
      name: "IUniswapV3PoolState",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IUniswapV3PoolState>;
    deployContract(
      name: "Configuration",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Configuration>;
    deployContract(
      name: "Core",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Core>;
    deployContract(
      name: "Delegation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Delegation>;
    deployContract(
      name: "Governance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Governance>;
    deployContract(
      name: "Dummy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Dummy>;
    deployContract(
      name: "DummySecond",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.DummySecond>;
    deployContract(
      name: "MockGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockGovernance>;
    deployContract(
      name: "Proposal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proposal>;
    deployContract(
      name: "IGovernance2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGovernance2>;
    deployContract(
      name: "ProposalStateChangeGovernance",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProposalStateChangeGovernance>;
    deployContract(
      name: "IProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IProxy>;
    deployContract(
      name: "NewImplementation",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NewImplementation>;
    deployContract(
      name: "ProposalUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ProposalUpgrade>;
    deployContract(
      name: "GasCompensator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GasCompensator>;
    deployContract(
      name: "IGasCompensationVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGasCompensationVault>;
    deployContract(
      name: "GovernanceGasUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceGasUpgrade>;
    deployContract(
      name: "GovernanceVaultUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceVaultUpgrade>;
    deployContract(
      name: "ITornadoVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoVault>;
    deployContract(
      name: "GovernanceStakingUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceStakingUpgrade>;
    deployContract(
      name: "ITornadoStakingRewards",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoStakingRewards>;
    deployContract(
      name: "AdminUpgradeableProxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AdminUpgradeableProxy>;
    deployContract(
      name: "GovernanceExploitPatchUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceExploitPatchUpgrade>;
    deployContract(
      name: "IMetamorphicContractFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMetamorphicContractFactory>;
    deployContract(
      name: "InitialProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InitialProposal>;
    deployContract(
      name: "MaliciousProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MaliciousProposal>;
    deployContract(
      name: "PatchProposal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.PatchProposal>;
    deployContract(
      name: "GovernanceProposalStateUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GovernanceProposalStateUpgrade>;
    deployContract(
      name: "ApprovalTornado",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ApprovalTornado>;
    deployContract(
      name: "InfoRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.InfoRegistry>;
    deployContract(
      name: "ISignatureTransfer",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignatureTransfer>;
    deployContract(
      name: "ITornadoV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITornadoV2>;
    deployContract(
      name: "ITovarishRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ITovarishRegistry>;
    deployContract(
      name: "IVault",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IVault>;
    deployContract(
      name: "ParseSignature",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ParseSignature>;
    deployContract(
      name: "Permit2Mock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Permit2Mock>;
    deployContract(
      name: "MultiLock",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MultiLock>;
    deployContract(
      name: "Puppet",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Puppet>;
    deployContract(
      name: "TornadoV2",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TornadoV2>;
    deployContract(
      name: "TovarishAggregator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TovarishAggregator>;
    deployContract(
      name: "INameWrapper",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INameWrapper>;
    deployContract(
      name: "TovarishRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.TovarishRegistry>;
    deployContract(
      name: "V2Bridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.V2Bridge>;
    deployContract(
      name: "CreateX",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CreateX>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
