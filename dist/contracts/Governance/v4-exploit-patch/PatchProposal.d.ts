import type { BaseContract, BytesLike, FunctionFragment, Result, Interface, ContractRunner, ContractMethod, Listener } from "ethers";
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedListener, TypedContractMethod } from "../../../common";
export interface PatchProposalInterface extends Interface {
    getFunction(nameOrSignature: "TORN" | "deployedRelayerRegistryImplementationAddress" | "deployedStakingProxyContractAddress" | "executeProposal" | "gasCompensationVaultAddress" | "governanceProxyAddress" | "oldStakingProxyAddress" | "registryProxyAddress" | "userVaultAddress"): FunctionFragment;
    encodeFunctionData(functionFragment: "TORN", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployedRelayerRegistryImplementationAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "deployedStakingProxyContractAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "executeProposal", values?: undefined): string;
    encodeFunctionData(functionFragment: "gasCompensationVaultAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "governanceProxyAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "oldStakingProxyAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "registryProxyAddress", values?: undefined): string;
    encodeFunctionData(functionFragment: "userVaultAddress", values?: undefined): string;
    decodeFunctionResult(functionFragment: "TORN", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployedRelayerRegistryImplementationAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "deployedStakingProxyContractAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "executeProposal", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "gasCompensationVaultAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "governanceProxyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "oldStakingProxyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "registryProxyAddress", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "userVaultAddress", data: BytesLike): Result;
}
export interface PatchProposal extends BaseContract {
    connect(runner?: ContractRunner | null): PatchProposal;
    waitForDeployment(): Promise<this>;
    interface: PatchProposalInterface;
    queryFilter<TCEvent extends TypedContractEvent>(event: TCEvent, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TypedEventLog<TCEvent>>>;
    on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>;
    once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>;
    listeners<TCEvent extends TypedContractEvent>(event: TCEvent): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>;
    TORN: TypedContractMethod<[], [string], "view">;
    deployedRelayerRegistryImplementationAddress: TypedContractMethod<[
    ], [
        string
    ], "view">;
    deployedStakingProxyContractAddress: TypedContractMethod<[
    ], [
        string
    ], "view">;
    executeProposal: TypedContractMethod<[], [void], "nonpayable">;
    gasCompensationVaultAddress: TypedContractMethod<[], [string], "view">;
    governanceProxyAddress: TypedContractMethod<[], [string], "view">;
    oldStakingProxyAddress: TypedContractMethod<[], [string], "view">;
    registryProxyAddress: TypedContractMethod<[], [string], "view">;
    userVaultAddress: TypedContractMethod<[], [string], "view">;
    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;
    getFunction(nameOrSignature: "TORN"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "deployedRelayerRegistryImplementationAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "deployedStakingProxyContractAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "executeProposal"): TypedContractMethod<[], [void], "nonpayable">;
    getFunction(nameOrSignature: "gasCompensationVaultAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "governanceProxyAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "oldStakingProxyAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "registryProxyAddress"): TypedContractMethod<[], [string], "view">;
    getFunction(nameOrSignature: "userVaultAddress"): TypedContractMethod<[], [string], "view">;
    filters: {};
}
