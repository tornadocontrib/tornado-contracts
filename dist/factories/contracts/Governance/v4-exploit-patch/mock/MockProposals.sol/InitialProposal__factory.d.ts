import { ContractFactory, ContractTransactionResponse } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../../common";
import type { InitialProposal, InitialProposalInterface } from "../../../../../../contracts/Governance/v4-exploit-patch/mock/MockProposals.sol/InitialProposal";
type InitialProposalConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class InitialProposal__factory extends ContractFactory {
    constructor(...args: InitialProposalConstructorParams);
    getDeployTransaction(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<ContractDeployTransaction>;
    deploy(overrides?: NonPayableOverrides & {
        from?: string;
    }): Promise<InitialProposal & {
        deploymentTransaction(): ContractTransactionResponse;
    }>;
    connect(runner: ContractRunner | null): InitialProposal__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060c08061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c8063373058b814603757806363a599a414603f575b600080fd5b603d6045565b005b603d607d565b7f2ff532ec74fd1130db9b7b6800e0992b2363095b00331a891a27edfab97c45406001604051607391906081565b60405180910390a1565b6000ff5b9081526020019056fea2646970667358221220caa94f8fa5c60b81d52a84f87ae94cd8404f8404b9ee9669cbdd4f3dfea3604764736f6c634300060c0033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "num";
            readonly type: "uint256";
        }];
        readonly name: "MockExecuted";
        readonly type: "event";
    }, {
        readonly inputs: readonly [];
        readonly name: "emergencyStop";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "executeProposal";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): InitialProposalInterface;
    static connect(address: string, runner?: ContractRunner | null): InitialProposal;
}
export {};
